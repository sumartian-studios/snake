# Generated by Snake (2.0.0). You must not modify this file.

if(NOT DEFINED SNAKE_DIR)
message(STATUS "Snake directory is not defined...")
if(DEFINED NO_SNAKE)
set(SNAKE_DIR "${CMAKE_BINARY_DIR}" CACHE INTERNAL "")
message(STATUS "Not using Snake... ${SNAKE_DIR}")
else()
message(FATAL_ERROR "You must re-configure the project using Snake or set NO_SNAKE=on")
endif()
else()
message(STATUS "Slithering into... ${SNAKE_DIR}")
endif()
cmake_minimum_required(VERSION 3.30.0 FATAL_ERROR)
project(Your_Project_Name VERSION 0.0.0 LANGUAGES CXX)
set(SNAKE_CONTACT "Your_Project_Organization <Your_Project_Email>")
set(SNAKE_ORGANIZATION "Your_Project_Organization")
set(SNAKE_PROJECT_LICENSE "MIT")
set(SNAKE_PROJECT_REPOSITORY "Your_Project_Repo")
set(CMAKE_PROJECT_HOMEPAGE_URL "Your_Project_Site")
set(CMAKE_PROJECT_DESCRIPTION "Your_Project_Description")
include("${SNAKE_DIR}/snake.1.cmake")
include("${SNAKE_DIR}/snake.2.cmake")
include("${SNAKE_DIR}/snake.3.cmake")
set(TARGET_STATUS "[01/04] cc-lib")
if(SNAKE_ALWAYS_BUILD)
print_status("${TARGET_STATUS}")
add_library(cc-lib ${SNAKE_LIB_TYPE})
snake_init_target(cc-lib "lib/cc-lib" PUBLIC shared-library "Example target." off)
set_target_properties(cc-lib PROPERTIES AUTOMOC on)
find_package(Qt6 REQUIRED COMPONENTS Core)
target_link_libraries(cc-lib PUBLIC Qt6::Core)
snake_fini_target(cc-lib)
else()
print_dim_status("${TARGET_STATUS} (disabled)")
endif()
set(TARGET_STATUS "[02/04] example-one")
if(SNAKE_ALWAYS_BUILD)
print_status("${TARGET_STATUS}")
add_executable(example-one)
snake_init_target(example-one "examples/example-one" PRIVATE executable "Example target." off)
set_target_properties(example-one PROPERTIES AUTOMOC on)
find_package(Qt6 REQUIRED COMPONENTS Core)
target_link_libraries(example-one PUBLIC Qt6::Core)
target_link_libraries(example-one PUBLIC cc-lib)
snake_fini_target(example-one)
else()
print_dim_status("${TARGET_STATUS} (disabled)")
endif()
set(TARGET_STATUS "[03/04] qt-app")
if(SNAKE_ALWAYS_BUILD)
print_status("${TARGET_STATUS}")
add_executable(qt-app)
snake_init_target(qt-app "src/qt-app" PRIVATE executable "Example target." off)
set_target_properties(qt-app PROPERTIES AUTOMOC on)
find_package(Qt6 REQUIRED COMPONENTS Core)
target_link_libraries(qt-app PUBLIC Qt6::Core)
target_link_libraries(qt-app PUBLIC cc-lib)
snake_add_resources("qt-app" "${CMAKE_SOURCE_DIR}/res/data.txt" "" "")
snake_fini_target(qt-app)
else()
print_dim_status("${TARGET_STATUS} (disabled)")
endif()
set(TARGET_STATUS "[04/04] test-qt-lib")
if(SNAKE_ALWAYS_BUILD)
print_status("${TARGET_STATUS}")
add_executable(test-qt-lib)
snake_init_target(test-qt-lib "tests/test-qt-lib" PRIVATE test "Example target." off)
set_target_properties(test-qt-lib PROPERTIES AUTOMOC on)
find_package(Qt6 REQUIRED COMPONENTS Core)
target_link_libraries(test-qt-lib PUBLIC Qt6::Core)
find_package(Qt6 REQUIRED COMPONENTS Test)
target_link_libraries(test-qt-lib PUBLIC Qt6::Test)
add_test(NAME "some-generic-test-group" COMMAND test-qt-lib example_test_1 example_test_2)
snake_fini_target(test-qt-lib)
else()
print_dim_status("${TARGET_STATUS} (disabled)")
endif()
add_custom_target(echo WORKING_DIRECTORY ${CMAKE_SOURCE_DIR} COMMAND scripts/echo.sh)
add_custom_target(echo-cmake WORKING_DIRECTORY ${CMAKE_SOURCE_DIR} COMMAND ${CMAKE_COMMAND} -E echo "Hi?")
include("${SNAKE_DIR}/snake.4.cmake")
